<?php

class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}

$a1 = new A();
$a2 = new A();
$a1->foo(); //1 Присваивание выполнилось при первом вызове метода, значение $x сохранилось
$a2->foo(); //2 При последующих вызовах присваивание не происходит, переменная получает сохраненное ранее значение
$a1->foo(); //3 Оба объекта являются наследниками одного класса, а статическая переменная принадлежит классу, а не объекту
$a2->foo(); //4

class AA {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}

class B extends AA {
}
$a1 = new AA();
$b1 = new B();
$a1->foo(); //1 Вызывается метод класса A, инициализируется переменная $x класса А
$b1->foo(); //1 Вызывается метод класса В, инициализируется переменная $x класса В
$a1->foo(); //2 Так как мы вызываем методы разных классов, то и переменная $x в каждом классе своя
$b1->foo(); //2

class AAA {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class BB extends AAA {
}
$a1 = new AAA; // Метод __construct в классе отсутствует, скобки можно опустить
$b1 = new BB;
$a1->foo(); //1
$b1->foo(); //1
$a1->foo(); //2
$b1->foo(); //2
